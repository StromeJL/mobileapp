﻿<#@ template language="C#" hostspecific="True"
#><#@ assembly name="System.Core"
#><#@ import namespace="System.IO"
#><#@ import namespace="System.Linq"
#><#@ import namespace="System.Text.RegularExpressions"
#>using System;
using System.Collections.Generic;
using Toggl.Foundation.Models.Interfaces;
using Toggl.PrimeRadiant;
using Toggl.PrimeRadiant.Models;
using Toggl.Multivac;
using Toggl.Multivac.Models;

namespace Toggl.Foundation.Models
{
<#
    var filePath = Path.GetDirectoryName(Host.TemplateFile);
    var solutionDirectory = Path.Combine(filePath, "../../Toggl.Multivac/Models/" );
    var databaseModelDirectory = Path.Combine(filePath, "../../Toggl.PrimeRadiant/Models");
    var modelsToGenerate = Directory.GetFiles(solutionDirectory, "*.cs");
    var databaseInterfaces = Directory.GetFiles(databaseModelDirectory, "I*.cs");
    var isFirstClass = true;

    foreach(var modelFile in modelsToGenerate)
    {
        var interfaceName = Path.GetFileName(modelFile).Replace(".cs", "");
        if (interfaceName == "IIdentifiable"
            || interfaceName == "IDeletable"
            || interfaceName == "ILastChangedDatable")
            continue;

        var className = interfaceName.Substring(1, interfaceName.Length - 1);
        
        var databaseInterfaceName = $"IDatabase{className}";
        var databaseInterfaceFileName = Path.Combine(filePath, "../../Toggl.PrimeRadiant/Models/", databaseInterfaceName + ".cs");
        var databaseInterfaceExists = File.Exists(databaseInterfaceFileName);

        if (!databaseInterfaceExists) continue;

        var threadSafeInterfaceName = $"IThreadSafe{className}";
        var threadSafeInterfaceFileName = Path.Combine(filePath, "./Interfaces/ThreadsafeModels.cs");
        var threadSafeInterfaceExists = File.ReadAllLines(threadSafeInterfaceFileName).Any(l => l.Contains(threadSafeInterfaceName));

        var implementsIDatabaseSyncable = databaseInterfaceExists
            && File.ReadAllLines(databaseInterfaceFileName).Any(l => l.Contains("IDatabaseSyncable"));

        var implementsIDeletable = File.ReadAllLines(modelFile).Any(l => l.Contains("IDeletable"));

        var implementsILastChangedDatabale = File.ReadAllLines(modelFile).Any(l => l.Contains("ILastChangedDatable"));

        var implementsIIdentifiable = File.ReadAllLines(modelFile).Any(l => l.Contains("IIdentifiable"));

        if (!isFirstClass)
            WriteLine("");

        WriteLine($"    internal partial class {className} : IThreadSafe{className}");
        WriteLine( "    {");

        if (implementsIIdentifiable)
        {
            WriteLine("        public long Id { get; }\n");
        }

        foreach(var line in File.ReadAllLines(modelFile))
        {
            var isProperty = line.Contains("get;");
            if (!isProperty) continue;

            WriteLine($"        public {line.Trim()}\n");
        }

        var expectedInterfaceFile = Path.Combine(databaseModelDirectory, $"IDatabase{className}.cs");
        var interfaceFile = databaseInterfaces.FirstOrDefault(i => i == expectedInterfaceFile);
        if (interfaceFile != null)
        {
            foreach (var line in File.ReadAllLines(interfaceFile))
            {
                var isProperty = line.Contains("get;");
                if (!isProperty) continue;

                if (threadSafeInterfaceExists)
                {
                    var match = Regex.Match(line, @"^[ ]*(?<type>[^ ]+) (?<name>[^ ]+) { get; }$", RegexOptions.IgnoreCase);
                    if (!match.Success) continue;

                    var name = match.Groups["name"].Captures[0].Value;
                    var type = match.Groups["type"].Captures[0].Value;
                    var threadSafeType = type.Replace("IDatabase", "IThreadSafe");

                    WriteLine($"        {type} IDatabase{className}.{name} => {name};\n");
                    WriteLine($"        public {threadSafeType} {name} {{ get; }}\n");
                }
                else
                {
                    WriteLine($"        public {line.Trim()}\n");
                }
            }
        }

        if (implementsIDatabaseSyncable)
        {
            WriteLine("        public bool IsDeleted { get; }\n");
            WriteLine("        public SyncStatus SyncStatus { get; }\n");
            WriteLine("        public string LastSyncErrorMessage { get; }");
            if (implementsILastChangedDatabale || implementsIDeletable) WriteLine("");
        }
        
        if (implementsILastChangedDatabale)
        {
            WriteLine("        public DateTimeOffset At { get; }");
            if (implementsIDeletable) WriteLine("");
        }
        
        if (implementsIDeletable)
        {
            WriteLine("        public DateTimeOffset? ServerDeletedAt { get; }");
        }

        WriteLine("    }");

        isFirstClass = false;
    }
#>}